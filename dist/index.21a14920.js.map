{"mappings":"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","sources":["src/appointments.js"],"sourcesContent":["function addAppointment() {\r\n  // Get the title input element by its id\r\n  const title = document.getElementById(\"title\").value;\r\n\r\n  // Get the date input element by its id\r\n  const dateInput = document.getElementById(\"date\");\r\n  const dateValue = new Date(dateInput.value);\r\n  const options = { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" };\r\n  const germanDateString = dateValue.toLocaleDateString(\"de-DE\", options);\r\n  const [day, month, year] = germanDateString.split(\".\");\r\n  const date = new Date(`${year}-${month}-${day}`);\r\n\r\n  // Get the time input element by its id\r\n  const timeInput = document.getElementById(\"time\");\r\n  const timeValue = timeInput.value;\r\n\r\n  // Get the insurance input element by its id\r\n  const appSelector = document.getElementById(\"insuranceAdd\");\r\n  const selectedApp = appSelector.options[appSelector.selectedIndex];\r\n  const appointment = selectedApp.textContent;\r\n\r\n  //get the username by it's id\r\n  const username = document.getElementById(\"userLoginDisplayName\").value;\r\n\r\n  //get the customer name by it's id\r\n  const cName = document.getElementById(\"cName\").value;\r\n\r\n  console.log(title);\r\n  console.log(dateInput);\r\n  console.log(timeValue);\r\n  console.log(appointment);\r\n  console.log(username);\r\n  console.log(cName);\r\n\r\n  $.ajax({\r\n    url: \"http://localhost:3000/appointments\",\r\n    method: \"POST\",\r\n    contentType: \"application/json\",\r\n    data: JSON.stringify({\r\n      title: title,\r\n      date: date,\r\n      time: timeValue,\r\n      insurance: appointment,\r\n      user: username,\r\n      name: cName,\r\n    }),\r\n    success: function (data) {\r\n      console.log(\"Appointment created successfully:\", data);\r\n    },\r\n    error: function () {\r\n      console.log(\"Failed to create appointment.\");\r\n    },\r\n  });\r\n\r\n  clearValues();\r\n  setTimeout(function () {\r\n    loadTableArztAdmin();\r\n  }, 1000);\r\n}\r\n\r\nfunction deleteAppointment() {\r\n  // Get the row with the \"table-active\" class\r\n  const activeRow = document.querySelector(\".table-active\");\r\n\r\n  // Get the values of the cells in the active row\r\n  const _id = activeRow.cells[0].innerText;\r\n\r\n  $.ajax({\r\n    url: \"http://localhost:3000/appointments/\" + _id,\r\n    method: \"DELETE\",\r\n    success: function (data) {\r\n      console.log(\"Appointment deleted successfully:\", data);\r\n    },\r\n    error: function () {\r\n      console.log(\"Failed to delete appointment.\");\r\n    },\r\n  });\r\n\r\n  clearValues();\r\n  setTimeout(function () {\r\n    loadTableArztAdmin();\r\n  }, 1000);\r\n}\r\n\r\nfunction updateAppointment() {\r\n  // Get the row with the \"table-active\" class\r\n  const activeRow = document.querySelector(\".table-active\");\r\n\r\n  // Get the values of the cells in the active row\r\n  const _id = activeRow.cells[0].innerText;\r\n\r\n  // Get the title input element by its id\r\n  const title = document.getElementById(\"titleEdit\").value;\r\n\r\n  // Get the date input element by its id\r\n  const dateInput = document.getElementById(\"dateEdit\");\r\n  const dateValue = new Date(dateInput.value);\r\n  const options = { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" };\r\n  const germanDateString = dateValue.toLocaleDateString(\"de-DE\", options);\r\n  const [day, month, year] = germanDateString.split(\".\");\r\n  const date = new Date(`${year}-${month}-${day}`);\r\n\r\n  // Get the time input element by its id\r\n  const timeInput = document.getElementById(\"timeEdit\");\r\n  const time = timeInput.value;\r\n\r\n  // Get the insurance input element by its id\r\n  const appSelector = document.getElementById(\"insuranceEdit\");\r\n  const selectedApp = appSelector.options[appSelector.selectedIndex];\r\n  const insurance = selectedApp.textContent;\r\n\r\n  //get the customer name by it's id\r\n  const name = document.getElementById(\"cNameEdit\").value;\r\n\r\n  $.ajax({\r\n    url: \"http://localhost:3000/appointments/\" + _id,\r\n    method: \"PATCH\",\r\n    contentType: \"application/json\",\r\n    data: JSON.stringify({\r\n      title: title,\r\n      date: date,\r\n      time: time,\r\n      insurance: insurance,\r\n      name: name,\r\n    }),\r\n    success: function (data) {\r\n      console.log(\"Appointment updated successfully:\", data);\r\n    },\r\n    error: function () {\r\n      console.log(\"Failed to update appointment.\");\r\n    },\r\n  });\r\n\r\n  clearValues();\r\n  setTimeout(function () {\r\n    loadTableArztAdmin();\r\n  }, 1000);\r\n}\r\n\r\nfunction loadTableUser(username) {\r\n  // Delete any existing table before creating a new one\r\n  $(\"#terminTable\").remove();\r\n  // Make a GET request to retrieve all entries from your appointments collection\r\n  $.ajax({\r\n    url: \"http://localhost:3000/appointments/\" + username,\r\n    method: \"GET\",\r\n    success: function (data) {\r\n      // Create an HTML table element with headers\r\n      var table = $(\"<table>\").addClass(\"table\").attr(\"id\", \"terminTable\");\r\n      var headerRow = $(\"<tr>\");\r\n      headerRow.append($(\"<th>\").text(\"Datum\"));\r\n      headerRow.append($(\"<th>\").text(\"Uhrzeit\"));\r\n      headerRow.append($(\"<th>\").text(\"Terminart\"));\r\n      headerRow.append($(\"<th>\").text(\"Versicherung\"));\r\n      table.append($(\"<thead>\").append(headerRow));\r\n\r\n      // Loop through the list of objects and create a table row for each entry\r\n      var tbody = $(\"<tbody>\");\r\n      $.each(data, function (i, entry) {\r\n        var row = $(\"<tr>\");\r\n        const dateString = entry.date;\r\n        const date = new Date(dateString);\r\n        const options = { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" };\r\n        const formattedDate = date.toLocaleDateString(\"de-DE\", options);\r\n        console.log(formattedDate);\r\n        row.append($(\"<td>\").text(formattedDate));\r\n        row.append($(\"<td>\").text(entry.time));\r\n        row.append($(\"<td>\").text(entry.title));\r\n        row.append($(\"<td>\").text(entry.insurance));\r\n        tbody.append(row);\r\n      });\r\n      table.append(tbody);\r\n\r\n      // Add the table to the desired location in your HTML document\r\n      $(\"#Terminliste\").append(table);\r\n    },\r\n    error: function () {\r\n      console.log(\"Failed to retrieve entries from API.\");\r\n    },\r\n  });\r\n\r\n  activeTable();\r\n}\r\n\r\nfunction loadTableArztAdmin() {\r\n  // Delete any existing table before creating a new one\r\n  $(\"#terminTable\").remove();\r\n  // Make a GET request to retrieve all entries from your appointments collection\r\n  $.ajax({\r\n    url: \"http://localhost:3000/appointments\",\r\n    method: \"GET\",\r\n    success: function (data) {\r\n      // Create an HTML table element with headers\r\n      var table = $(\"<table>\").addClass(\"table\").attr(\"id\", \"terminTable\");\r\n      var headerRow = $(\"<tr>\");\r\n      headerRow.append($(\"<th>\").addClass(\"d-none\").text(\"ID\")); // Add \"d-none d-md-table-cell\" classes to hide the column\r\n      headerRow.append($(\"<th>\").text(\"Datum\"));\r\n      headerRow.append($(\"<th>\").text(\"Uhrzeit\"));\r\n      headerRow.append($(\"<th>\").text(\"Terminart\"));\r\n      headerRow.append($(\"<th>\").text(\"Versicherung\"));\r\n      headerRow.append($(\"<th>\").text(\"Patient\"));\r\n      table.append($(\"<thead>\").append(headerRow));\r\n\r\n      // Loop through the list of objects and create a table row for each entry\r\n      var tbody = $(\"<tbody>\");\r\n      $.each(data, function (i, entry) {\r\n        var row = $(\"<tr>\");\r\n\r\n        const _id = entry._id;\r\n        const dateString = entry.date;\r\n        const date = new Date(dateString);\r\n        const options = { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" };\r\n        const formattedDate = date.toLocaleDateString(\"de-DE\", options);\r\n        row.append($(\"<td>\").addClass(\"d-none\").text(_id)); // Add \"d-none d-md-table-cell\" classes to hide the column\r\n        row.append($(\"<td>\").text(formattedDate));\r\n        row.append($(\"<td>\").text(entry.time));\r\n        row.append($(\"<td>\").text(entry.title));\r\n        row.append($(\"<td>\").text(entry.insurance));\r\n        row.append($(\"<td>\").text(entry.name));\r\n        tbody.append(row);\r\n      });\r\n      table.append(tbody);\r\n\r\n      // Add the table to the desired location in your HTML document\r\n      $(\"#Terminliste\").append(table);\r\n    },\r\n    error: function () {\r\n      console.log(\"Failed to retrieve entries from API.\");\r\n    },\r\n  });\r\n\r\n  activeTable();\r\n}\r\n"],"names":[],"version":3,"file":"index.21a14920.js.map","sourceRoot":"/__parcel_source_root/"}